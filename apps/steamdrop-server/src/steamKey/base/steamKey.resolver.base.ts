/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SteamKey } from "./SteamKey";
import { SteamKeyCountArgs } from "./SteamKeyCountArgs";
import { SteamKeyFindManyArgs } from "./SteamKeyFindManyArgs";
import { SteamKeyFindUniqueArgs } from "./SteamKeyFindUniqueArgs";
import { CreateSteamKeyArgs } from "./CreateSteamKeyArgs";
import { UpdateSteamKeyArgs } from "./UpdateSteamKeyArgs";
import { DeleteSteamKeyArgs } from "./DeleteSteamKeyArgs";
import { Order } from "../../order/base/Order";
import { User } from "../../user/base/User";
import { SteamKeyService } from "../steamKey.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SteamKey)
export class SteamKeyResolverBase {
  constructor(
    protected readonly service: SteamKeyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SteamKey",
    action: "read",
    possession: "any",
  })
  async _steamKeysMeta(
    @graphql.Args() args: SteamKeyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SteamKey])
  @nestAccessControl.UseRoles({
    resource: "SteamKey",
    action: "read",
    possession: "any",
  })
  async steamKeys(
    @graphql.Args() args: SteamKeyFindManyArgs
  ): Promise<SteamKey[]> {
    return this.service.steamKeys(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SteamKey, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SteamKey",
    action: "read",
    possession: "own",
  })
  async steamKey(
    @graphql.Args() args: SteamKeyFindUniqueArgs
  ): Promise<SteamKey | null> {
    const result = await this.service.steamKey(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SteamKey)
  @nestAccessControl.UseRoles({
    resource: "SteamKey",
    action: "create",
    possession: "any",
  })
  async createSteamKey(
    @graphql.Args() args: CreateSteamKeyArgs
  ): Promise<SteamKey> {
    return await this.service.createSteamKey({
      ...args,
      data: {
        ...args.data,

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SteamKey)
  @nestAccessControl.UseRoles({
    resource: "SteamKey",
    action: "update",
    possession: "any",
  })
  async updateSteamKey(
    @graphql.Args() args: UpdateSteamKeyArgs
  ): Promise<SteamKey | null> {
    try {
      return await this.service.updateSteamKey({
        ...args,
        data: {
          ...args.data,

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SteamKey)
  @nestAccessControl.UseRoles({
    resource: "SteamKey",
    action: "delete",
    possession: "any",
  })
  async deleteSteamKey(
    @graphql.Args() args: DeleteSteamKeyArgs
  ): Promise<SteamKey | null> {
    try {
      return await this.service.deleteSteamKey(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Order, {
    nullable: true,
    name: "order",
  })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async getOrder(@graphql.Parent() parent: SteamKey): Promise<Order | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: SteamKey): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SteamKey as PrismaSteamKey,
  Order as PrismaOrder,
  User as PrismaUser,
} from "@prisma/client";

export class SteamKeyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SteamKeyCountArgs, "select">): Promise<number> {
    return this.prisma.steamKey.count(args);
  }

  async steamKeys(
    args: Prisma.SteamKeyFindManyArgs
  ): Promise<PrismaSteamKey[]> {
    return this.prisma.steamKey.findMany(args);
  }
  async steamKey(
    args: Prisma.SteamKeyFindUniqueArgs
  ): Promise<PrismaSteamKey | null> {
    return this.prisma.steamKey.findUnique(args);
  }
  async createSteamKey(
    args: Prisma.SteamKeyCreateArgs
  ): Promise<PrismaSteamKey> {
    return this.prisma.steamKey.create(args);
  }
  async updateSteamKey(
    args: Prisma.SteamKeyUpdateArgs
  ): Promise<PrismaSteamKey> {
    return this.prisma.steamKey.update(args);
  }
  async deleteSteamKey(
    args: Prisma.SteamKeyDeleteArgs
  ): Promise<PrismaSteamKey> {
    return this.prisma.steamKey.delete(args);
  }

  async getOrder(parentId: string): Promise<PrismaOrder | null> {
    return this.prisma.steamKey
      .findUnique({
        where: { id: parentId },
      })
      .order();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.steamKey
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
